trigger: none

pool: selfhosted

resources:
 pipelines:
   - pipeline: my-test-p
     source: \Folder2\gitversion-m
     trigger: true

steps:  
- task: PowerShell@2
  inputs:
    targetType : inline
    script: |
      $org = "apleona"
      $project = "ApleonaEcosystem%202.0"
      $clientId = "16401264-7975-422d-a6dc-df7ed9ca487f"
      $clientSecret = "sx68Q~hjoxhcT2RvX-JJjvtD2_IWM0p.D.4ItcX_"
      $tenantId = "49c4f7b6-63e2-452b-84f2-18c8aabc0b91"
      $resource = "https://apleona.visualstudio.com/.default"

      $tokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"

      $body = @{
          grant_type    = "client_credentials"
          client_id     = $clientId
          client_secret = $clientSecret
          scope      = $resource
      }

      $response = Invoke-RestMethod -Uri $tokenUrl -Method Post -Body $body
      Write-Host "Response - $response"
      $accessToken = $response.access_token
      $uri = "https://dev.azure.com/$org/$project/_apis/build/builds?api-version=5.1"

      $headers = @{
          Authorization = "Bearer $accessToken"
      }

      $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get
      rite-Host "Response 2 - $response"
      $response.value | ForEach-Object {
          Write-Host "Build $($_.id) - $($_.status)"
      }
      Write-Host "Done"
      $loopCounter= 0
      $vars = @{
        "ci-1" = 4
        "ci-2" = 7
      }
      while ($true) {
        if($loopCounter -ge 5) {
          Write-Error "Retries exceeded. There were $loopCounter retries. Stop the CI."
          break
        }
        foreach ($key in $vars.Keys) {
          $url = "https://dev.azure.com/neroz1x/DevOps%20test/_apis/build/builds?definitions=$($vars[$key])&api-version=5.1"
          $connectionToken=$env:SECRET
          $base64AuthInfo= [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(":$($connectionToken)"))

          $buildPipeline= Invoke-RestMethod -Uri $url -Headers @{authorization = "Basic $base64AuthInfo"} -Method Get
          $BuildStatus= $buildPipeline.value.status | Select-Object -first 1
          $BuildResult= $buildPipeline.value.result | Select-Object -first 1

          Write-Host "status $BuildStatus"
          Write-Host "result $BuildResult"
          if ($BuildStatus -eq "completed" -And $BuildResult -ne "succeeded") { # Consider adding 'partiallySucceeded' status.
            Write-Error "$key is $BuildResult. Stop this run."
            break 2
          }
          elseif ($BuildStatus -ne "completed") {
            Write-Host "$key is $BuildStatus"
            $loopCounter = $loopCounter + 1
            Start-Sleep -Seconds 120
            continue 2
          }
        }
        break
      }
  env:
    SECRET: $(secret)


- task: PowerShell@2
  inputs:
    targetType : inline
    script: |
      Write-Host "There were $loopCounter retries. Stop the CI."
  env:
    SECRET: $(secret)